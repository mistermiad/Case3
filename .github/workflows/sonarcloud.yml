name: SonarQube

on:
  pull_request:
    branches:
      - main

env:
  # Environment variables for the workflow
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY_BACKEND: master-ugr.calculator.back-end/calculator.backend
  WORKING_DIRECTORY_FRONTEND: master-ugr.calculator.front-end/calculator.frontend
  TEST_DIRECTORY_BACKEND: master-ugr.calculator.back-end/tests/calculator.backend.tests
  TEST_DIRECTORY_FRONTEND: master-ugr.calculator.front-end/tests/calculator.frontend.tests
  SONARCLOUD_PROJECTKEY: mistermiad_Case3
  SONARCLOUD_ORGANIZATION: mistermiad
  SONARCLOUD_HOST_URL: https://sonarcloud.io
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Restore dependencies for front-end
        run: |
          dotnet restore ${{ env.WORKING_DIRECTORY_FRONTEND }}
          dotnet restore ${{ env.WORKING_DIRECTORY_BACKEND }}
          dotnet restore ${{ env.TEST_DIRECTORY_BACKEND }}
          dotnet restore ${{ env.TEST_DIRECTORY_FRONTEND }}

      - name: Install dotnet coverage
        run: dotnet tool install --global dotnet-coverage

      - name: Build and analyze in SonarScanner
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ env.SONARCLOUD_PROJECTKEY }}" /o:"${{ env.SONARCLOUD_ORGANIZATION }}" /d:sonar.token="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONARCLOUD_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=backend-coverage.xml,frontend-coverage.xml
          dotnet build ${{ env.WORKING_DIRECTORY_BACKEND }}
          dotnet build ${{ env.WORKING_DIRECTORY_FRONTEND }}

      - name: Run tests with coverage for backend
        run: |
          dotnet-coverage collect "dotnet test ${{ env.TEST_DIRECTORY_BACKEND }}" --format coverage --output backend-coverage.xml

      - name: Run tests with coverage for frontend
        run: |
          dotnet-coverage collect "dotnet test ${{ env.TEST_DIRECTORY_FRONTEND }}" --format coverage --output frontend-coverage.xml

      - name: End analysis with SonarScanner
        shell: powershell
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"